import OpenAI from 'openai';
import fs from 'fs';

const openai = new OpenAI({ 
  apiKey: process.env.OPENAI_API_KEY
});

const ASSISTANT_ID = "asst_JerNOWvyU63gex8p0z3gSv8r";

/**
 * Cr√©e un chunk sp√©cialis√© pour la d√©couverte du mod√®le IA suisse de juillet 2025
 */
async function createSwissModelChunk() {
  try {
    const whatsappFile = './attached_assets/Discussion WhatsApp avec üîÅAi-Dialogue Actif_1752670591921.txt';
    const content = fs.readFileSync(whatsappFile, 'utf-8');
    
    const lines = content.split('\n');
    
    // Trouver la ligne 27384 et extraire le contexte
    const targetLine = 27384 - 1; // Index 0-based
    const contextStart = Math.max(0, targetLine - 10);
    const contextEnd = Math.min(lines.length, targetLine + 20);
    const context = lines.slice(contextStart, contextEnd);
    
    const swissModelContent = `=== D√âCOUVERTE MAJEURE: MOD√àLE IA SUISSE JUILLET 2025 ===
Date: 27 juillet 2025, 19:41
Participant: Rochane
Source: Courrier International

LIEN PARTAG√â:
https://www.courrierinternational.com/article/recherche-la-suisse-invente-un-modele-pour-l-ia-plus-ouvert-et-universel-qu-aucun-autre_233303

DESCRIPTION COMPL√àTE:
La Suisse vient de franchir une √©tape majeure dans le domaine de l'intelligence artificielle en lan√ßant un mod√®le IA √† la fois plus ouvert et plus universel que ceux propos√©s par les g√©ants mondiaux actuels. 

INSTITUTIONS IMPLIQU√âES:
- √âcole polytechnique f√©d√©rale de Lausanne (EPFL)
- √âcole polytechnique f√©d√©rale de Zurich (ETHZ)
- Autres institutions de recherche suisses

INFRASTRUCTURE:
- Supercalculateur "Alps" √† Lugano
- Plus de 10,000 processeurs graphiques (GPU) Nvidia
- Puissance pour entra√Æner des mod√®les de tr√®s grande ampleur

CARACT√âRISTIQUES R√âVOLUTIONNAIRES:
1. Open source complet (contrairement √† Llama, Deepseek)
2. Transparence totale:
   - Publication des poids du mod√®le
   - Ensemble des donn√©es d'entra√Ænement publiques
   - Descriptions d√©taill√©es des donn√©es
   - M√©thodes d'entra√Ænement compl√®tes
3. Tra√ßabilit√© compl√®te
4. Respect crit√®res √©thiques et juridiques
5. Exclusion des donn√©es personnelles
6. Contr√¥le qualit√© et provenance des donn√©es

CONTEXTE WHATSAPP:
${context.join('\n')}

=== MOTS-CL√âS ===
Suisse, EPFL, ETHZ, Alps, supercalculateur, Lugano, Nvidia, mod√®le IA, open source, juillet 2025, Rochane, Courrier International, transparence, √©thique

=== QUESTION TYPES √Ä R√âPONDRE ===
- "Nouveau mod√®le suisse juillet 2025"
- "EPFL ETHZ mod√®le IA"
- "Supercalculateur Alps"
- "Mod√®le IA open source complet"
- "Rochane partage mod√®le suisse"`;

    console.log('=== CHUNK MOD√àLE SUISSE SP√âCIALIS√â ===');
    console.log(`Contenu: ligne ${targetLine + 1} (27384)`);
    console.log(`Taille: ${swissModelContent.length} caract√®res`);
    
    // Cr√©er le fichier sp√©cialis√©
    const fileBuffer = Buffer.from(swissModelContent, 'utf-8');
    
    const file = await openai.files.create({
      file: new File([fileBuffer], 'Swiss_AI_Model_July27_2025_Rochane.txt', { type: 'text/plain' }),
      purpose: 'assistants'
    });
    
    // R√©cup√©rer le Vector Store actuel
    const assistant = await openai.beta.assistants.retrieve(ASSISTANT_ID);
    const vectorStoreId = assistant.tool_resources?.file_search?.vector_store_ids?.[0];
    
    if (vectorStoreId) {
      // Ajouter le fichier au Vector Store
      await openai.beta.vectorStores.files.create(vectorStoreId, {
        file_id: file.id
      });
      
      console.log('‚úÖ Chunk mod√®le suisse cr√©√© et ajout√©');
      console.log(`File ID: ${file.id}`);
      console.log(`Date pr√©cise: 27/07/2025, 19:41`);
      console.log(`Participant: Rochane`);
      console.log(`Sujet: EPFL/ETHZ + supercalculateur Alps`);
      
      return {
        success: true,
        fileId: file.id,
        vectorStoreId: vectorStoreId,
        date: '27/07/2025, 19:41',
        participant: 'Rochane'
      };
    } else {
      throw new Error('Vector Store non trouv√©');
    }
    
  } catch (error) {
    console.error('Erreur cr√©ation chunk mod√®le suisse:', error);
    return { success: false, error: error.message };
  }
}

export { createSwissModelChunk };